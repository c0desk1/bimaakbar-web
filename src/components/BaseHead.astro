---
import { SEO } from 'astro-seo';
import { SITE } from '../consts';
import { ClientRouter } from "astro:transitions";

const GTM_ID = import.meta.env.GTM_ID;

const {
  title = '',
  description = SITE.description,
  image = '/open-graph.png',
} = Astro.props;

const fullTitle = Astro.url.pathname === '/' ? SITE.title : `${title} | ${SITE.author}`;
const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const gtmScript = `(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;
j.src='https://www.googletagmanager.com/gtm.js?id=' + i + dl;
f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','${GTM_ID}');`;

---
<SEO
  title={fullTitle}
  description={description}
  canonical={canonicalURL.toString()}
  twitter={{
    card: 'summary_large_image',
    site: '@bimaakbarmusic'
  }}
  openGraph={{
    basic: {
      title,
      type: 'website',
      image: new URL(image, Astro.site).toString(),
      url: canonicalURL.toString()
    },
    optional: {
      siteName: SITE.title,
      description
    }
  }}
/>

<link rel="preload" href="/fonts/atkinson-regular.woff" as="font" type="font/woff" crossorigin="anonymous" />
<link rel="preload" href="/fonts/atkinson-bold.woff" as="font" type="font/woff" crossorigin="anonymous" />

<link rel="icon" href="/favicon.svg" type="image/svg+xml" />
<link rel="apple-touch-icon" href="/apple-touch-icon.png" />
<link rel="manifest" href="/site.webmanifest" />
<link rel="sitemap" href="/sitemap-index.xml" />

<meta charset="utf-8" />

<meta name="viewport" content="width=device-width, initial-scale=1" />
<meta name="generator" content={Astro.generator} />
<meta name="apple-mobile-web-app-title" content={title} />
<meta name="color-scheme" content="light dark" />
<meta name="theme-color" content="#ffffff" media="(prefers-color-scheme: light)" />
<meta name="theme-color" content="#0d0d0d" media="(prefers-color-scheme: dark)" />

<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={image}>

<ClientRouter />

<script is:inline async defer set:html={gtmScript}></script>
<script is:inline async defer src="https://accounts.google.com/gsi/client"></script>

<script is:inline>
  const storageKey = "theme";
  const themeOrder = ["light", "dark", "system"];

  function applyTheme(theme) {
    if (theme === "system") {
      const prefersDark = window.matchMedia("(prefers-color-scheme: dark)").matches;
      document.documentElement.classList.toggle("dark", prefersDark);
    } else {  
      document.documentElement.classList.toggle("dark", theme === "dark");
    }
  }

  function moveIndicator(index) {
    const indicator = document.getElementById("theme-indicator");
    if (indicator) indicator.style.transform = `translateX(${index * 100}%)`;
  }

  function updateActiveButton(index) {
    document.querySelectorAll(".theme-btn").forEach((btn, i) => {
      btn.classList.toggle("active", i === index);
    });
  }

  function setupThemeButtons() {
    document.querySelectorAll(".theme-btn").forEach((btn, index) => {
      btn.addEventListener("click", () => {
        const selected = btn.dataset.theme;
        localStorage.setItem(storageKey, selected);
        applyTheme(selected);
        moveIndicator(index);
        updateActiveButton(index);
      });
    });
  }
   
  function toggleDrawer() {
      document.getElementById("drawer")?.classList.toggle("open");
      document.getElementById("header-drawer-button")?.classList.toggle("open");
  }

  function initDrawer() {
      document.getElementById("header-drawer-button")?.addEventListener("click", toggleDrawer);
  }

  function reflectPreference() {
    const saved = localStorage.getItem(storageKey) || "system";
    const index = themeOrder.indexOf(saved);
    applyTheme(saved);
    moveIndicator(index);
    updateActiveButton(index);
   
    initDrawer();
  }

function handleError(_error, context) {
  const errorMessage = `Error pada ${context}`;
  console.error(errorMessage);
}

document.addEventListener("DOMContentLoaded", () => {
  try {
    reflectPreference();
    setupThemeButtons();
    initDrawer();
  } catch (error) {
    handleError(error, "DOMContentLoaded");
  }
});

document.addEventListener("astro:after-swap", () => {
  
  const header = document.querySelector('header[aria-label="Base Header"]');
  const scrollThreshold = 10;
  let isScrolled = false;
  
  function handleScroll () { 
    const scrolledCurrently = window.scrollY > scrollThreshold;
    if (scrolledCurrently !== isScrolled) {
      isScrolled = scrolledCurrently;
      if (header) {
        header.classList.toggle("is-scrolled", isScrolled);
      }
    }
      
  };

  window.addEventListener("scroll", handleScroll);

  try {
    reflectPreference();
    setupThemeButtons();
    initDrawer();
    handleScroll();
  } catch (error) {
    handleError(error, "astro:after-swap");
  }
});
</script>

