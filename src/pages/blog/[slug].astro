---
//src/pages/blog/[slug].astro
import { fetchBlog } from '../../utils/fetchBlog';
import BaseLayout from '../../layouts/BaseLayout.astro';
import BreadCrumb from '../../components/BreadCrumb.tsx';
import TopLayout from '../../layouts/TopLayout.astro';
import BottomLayout from '../../layouts/BottomLayout.astro';
import Container from '../../components/Container.astro';
import Navigation from "../../components/Navigation.astro";
import BackToTop from "../../components/BackToTop";
import { remark } from 'remark';
import html from 'remark-html';
import { Image } from 'astro:assets';
import { formatDate, formatUpdateDate, readingTime } from "../../lib/utils";
import ReadingProgress from '../../components/ReadingProgress';

export const prerender = true;

export async function getStaticPaths() {
  const posts = await fetchBlog();
  return posts
    .filter((p) => p.slug?.trim())
    .map((p) => ({ params: { slug: p.slug } }));
}

const { slug } = Astro.params;
const allPosts = await fetchBlog();

const sortedPosts = allPosts
  .filter((p) => p.slug?.trim() && p.status === 'PUBLISHED')
  .sort((a, b) => {
    const aDate = new Date(a.date ?? 0);
    const bDate = new Date(b.date ?? 0);
    return bDate.getTime() - aDate.getTime();
  });

const post = sortedPosts.find(p => p.slug === slug);
if (!post) {
  throw Astro.redirect('/404');
}

const index = sortedPosts.findIndex(p => p.slug === slug);
const prev = sortedPosts[index - 1] ?? null;
const next = sortedPosts[index + 1] ?? null;

const result = await remark().use(html).process(post.content ?? '');
const contentHtml = result.toString();
---
<ReadingProgress client:visible /> 
<BaseLayout
  title={post.metaTitle || post.title}
  description={post.metaDescription || post.description}
  image={post.cover}>
  <Container size="md">
    <TopLayout>
      <div class="flex flex-col items-center text-center justify-center">
        <BreadCrumb
          items={[
            { label: 'Home', href: '/' },
            { label: 'Blog', href: '/blog' },
            {
              label: post.category ?? 'Tanpa Kategori',
              href: `/blog/${encodeURIComponent(post.category ?? 'unknown')}`,
            },
            {
              label: post.title ?? 'Tanpa Judul',
              href: `/blog/${post.slug}`,
            },
          ]}
        />

        <div class="py-6 flex flex-col items-center text-center justify-center w-full">
          <div class="prose flex flex-col items-center">
            <h1>{post.title}</h1>
          </div>
          <div class="flex text-[var(--color-muted)] gap-2 items-center text-center justify-center">
            <span>{post.author}</span>
          </div>
          <div class="flex flex-row py-2 gap-2 items-center w-full text-sm text-[var(--color-muted)]">
            <div class="flex flex-1 items-center gap-1">
              <svg stroke="var(--color-fg)" class="size-4 pointer-events-none cursor-pointer">
                <use href="/ui.svg#book-open"></use>
              </svg>
              <span>{readingTime(contentHtml)}</span>
            </div>
            <div class="flex flex-shrink-0 items-center gap-1">
              <span>{formatDate(post.date)}</span>
            </div>
          </div>
          <div class="prose flex flex-col items-center">
            {post.description && <summary>{post.description}</summary>}
            {post.cover && <Image src={post.cover} alt={post.title} width={960} height={480} layout="constrained" />}
          </div>
        </div>
      </div>
    </TopLayout>
    <article class="prose">
      <div set:html={contentHtml} />
    </article>
    <BottomLayout>
      <div class="flex flex-col items-center gap-4 py-6">
        <span class="text-sm text-[var(--color-muted)]">{formatUpdateDate(post.lastModified)}</span>
        {post.tags?.length > 0 && (
          <div class="flex flex-wrap gap-2">
            {post.tags.map(tag => (
              <a href={`/tag/${encodeURIComponent(tag ?? 'unknown')}`} class="text-xs uppercase border border-[var(--color-border)] bg-[var(--color-bg)] text-[var(--color-muted)] px-2 py-1 rounded-lg">
                <span>
                  # {tag}
                </span>
              </a>
            ))}
          </div>
        )}
      </div>
      <div class="flex flex-row py-6 gap-2 items-center w-full text-[var(--color-muted)]">
        <div class="flex flex-1">
          {prev && (
            <a href={`/blog/${prev.slug}`} rel="prev" class="group flex flex-col text-left items-start">
              <div class="text-sm uppercase">Sebelumnya</div>
              <div class="text-md font-semibold mt-1 group-hover:text-[var(--color-fg)]">{prev.title}</div>
            </a>
          )}
        </div>
        <div class="flex flex-shrink-0">
          {next && (
            <a href={`/blog/${next.slug}`} rel="next" class="group flex flex-col text-right items-end">
              <div class="text-sm uppercase">Selanjutnya</div>
              <div class="text-md font-semibold mt-1 group-hover:text-[var(--color-fg)]">{next.title}</div>
            </a>
          )}
        </div>
      </div>
      <BackToTop client:visible />
    </BottomLayout>
    <Navigation/>
  </Container>
</BaseLayout>
