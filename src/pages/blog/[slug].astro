---
//src/pages/blog/[slug].astro
import { Image } from 'astro:assets';
import { fetchBlog } from '../../utils/fetchBlog';
import { remark } from 'remark';
import { formatDate, formatUpdateDate, readingTime } from "../../lib/utils";

import html from 'remark-html';
import BaseLayout from '../../layouts/BaseLayout.astro';
import TopLayout from '../../layouts/TopLayout.astro';
import BottomLayout from '../../layouts/BottomLayout.astro';
import Container from '../../components/Container.astro';
import BreadCrumb from '../../components/BreadCrumb.tsx';
import BackToTop from "../../components/ui/BackToTop.tsx";
import ReadingProgress from '../../components/ui/ReadingProgress.tsx';

export const prerender = true;

export async function getStaticPaths() {
  const posts = await fetchBlog();
  return posts
    .filter((p) => p.slug?.trim())
    .map((p) => ({ params: { slug: p.slug } }));
}

const { slug } = Astro.params;
const allPosts = await fetchBlog();

const sortedPosts = allPosts
  .filter((p) => p.slug?.trim())
  .sort((a, b) => {
    const aDate = new Date(a.date ?? 0);
    const bDate = new Date(b.date ?? 0);

    return bDate.getTime() - aDate.getTime();
  });

const post = sortedPosts.find(p => p.slug === slug);

if (!post) {
  throw Astro.redirect('/404');
}

const index = sortedPosts.findIndex(p => p.slug === slug);
const prev = sortedPosts[index - 1] ?? null;
const next = sortedPosts[index + 1] ?? null;

const result = await remark().use(html).process(post.content ?? 'Tidak ada konten');
const contentHtml = result.toString();
---
<ReadingProgress client:visible /> 
<BaseLayout
  title={post.metaTitle || post.title}
  description={post.metaDescription || post.description}
  image={post.cover}>
  <Container size="md">
    <TopLayout>
      <div class="flex flex-col items-center text-center justify-center text-wrap">
        <BreadCrumb
          items={[
            { label: 'Blog', href: '/blog' },
            { label: post.category ?? 'Tanpa Kategori', href: `/blog/category/${encodeURIComponent(post.category ?? 'unknown')}`,},
            { label: post.title ?? 'Tanpa Judul', href: `/blog/${post.slug}`,},
          ]}
        />
        <div class="prose py-6 flex flex-col items-center text-center justify-center w-full">
          <div class="prose flex flex-col items-center">
            <h1>{post.title}</h1>
          </div>
          <div class="flex text-[var(--color-muted)] gap-2 items-center text-center justify-center">
            <p>{post.author}</p>
          </div>
          <div class="flex flex-row py-2 gap-2 items-center w-full text-sm text-[var(--color-muted)]">
            <div class="flex flex-1 items-center gap-1">
              <svg stroke="var(--color-fg)" class="size-4 pointer-events-none cursor-pointer">
                <use href="/ui.svg#book-open"></use>
              </svg>
              <span>{readingTime(contentHtml)}</span>
            </div>
            <div class="flex flex-shrink-0 items-center gap-1">
              <span>{formatDate(post.date)}</span>
            </div>
          </div>
          {post.description && <summary>{post.description}</summary>}
          {post.cover && <Image src={post.cover} alt={post.title} width={960} height={480} layout="constrained" />}
        </div>
      </div>
    </TopLayout>
    <article class="prose">
      <div set:html={contentHtml} />
    </article>
    <BottomLayout>
      <div class="flex flex-col items-center gap-4 py-6 border-t border-[var(--color-border)]">
        <span class="text-sm text-[var(--color-muted)]">{formatUpdateDate(post.lastModified)}</span>
        {post.tags?.length > 0 && (
          <div class="flex flex-wrap gap-2">
            {post.tags.map(tag => (
              <a href={`/tag/${encodeURIComponent(tag ?? 'unknown')}`} class="text-xs uppercase border border-[var(--color-border)] bg-[var(--color-bg)] text-[var(--color-muted)] px-2 py-1 rounded-xl">
                <span>
                  #{tag}
                </span>
              </a>
            ))}
          </div>
        )}
      </div>
      <div class="flex flex-col md:flex-row py-6 gap-2 w-full text-[var(--color-muted)]">
        <div class="flex-1 w-full">
          {prev && (
            <a href={`/blog/${prev.slug}`} rel="prev" class="group flex flex-col text-left items-start gap-1 w-auto">
              <div class="text-sm uppercase">Sebelumnya</div>
              <div class="text-md font-semibold group-hover:text-[var(--color-fg)]">{prev.title}</div>
            </a>
          )}
        </div>
        <div class="flex-shrink-0 w-full">
          {next && (
            <a href={`/blog/${next.slug}`} rel="next" class="group flex flex-col text-right items-end gap-1 w-auto">
              <div class="text-sm uppercase">Selanjutnya</div>
              <div class="text-md font-semibold group-hover:text-[var(--color-fg)]">{next.title}</div>
            </a>
          )}
        </div>
      </div>
      <div class="flex flex-row py-6 gap-2 items-center w-full">
        <a href="/blog" class="group flex flex-1 w-auto items-center rounded-xl bg-[var(--color-bg)] border border-[var(--color-border)] px-2 py-1 text-[var(--color-fg)] hover:bg-[var(--color-hover)]">
          <div class="flex w-full items-center gap-2">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round" class="items-center stroke-[var(--color-muted)] group-hover:stroke-[var(--color-fg)]">
              <line x1="19" y1="12" x2="5" y2="12" class="scale-x-0 group-hover:scale-x-100 translate-x-3 group-hover:translate-x-0" />
              <polyline points="12 19 5 12 12 5" class="translate-x-1 group-hover:translate-x-0" />
            </svg>
            <span class="w-full items-center">
              Kembali ke Blog
            </span>
          </div>
        </a>
        <div class="flex flex-shrink-0">
          <BackToTop client:visible />
        </div>
      </div>
    </BottomLayout>
  </Container>
</BaseLayout>
